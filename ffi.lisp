;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 4.1.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package #:iouring)
(cffi:defctype :u64 :unsigned-long-long)
(cffi:defctype :size-t :unsigned-long)
(cffi:defctype :int64-t :int64)
(cffi:defctype :socklen-t :unsigned-int)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant _XOPEN_SOURCE 500)

(cffi:defcstruct io_uring_sq
	(khead :pointer)
	(ktail :pointer)
	(kring_mask :pointer)
	(kring_entries :pointer)
	(kflags :pointer)
	(kdropped :pointer)
	(array :pointer)
	(sqes :pointer)
	(sqe_head :unsigned-int)
	(sqe_tail :unsigned-int)
	(ring_sz :size-t)
	(ring_ptr :pointer)
	(pad :pointer :count 4))

(cffi:defcstruct io_uring_cq
	(khead :pointer)
	(ktail :pointer)
	(kring_mask :pointer)
	(kring_entries :pointer)
	(kflags :pointer)
	(koverflow :pointer)
	(cqes :pointer)
	(ring_sz :size-t)
	(ring_ptr :pointer)
	(pad :pointer :count 4))

(cffi:defcstruct io_uring
	(sq io_uring_sq)
	(cq io_uring_cq)
	(flags :unsigned-int)
	(ring_fd :int)
	(features :unsigned-int)
	(pad :pointer :count 3))

(cffi:defcfun ("io_uring_get_probe_ring" io_uring_get_probe_ring) :pointer
  (ring :pointer))

(cffi:defcfun ("io_uring_get_probe" io_uring_get_probe) :pointer)

(cffi:defcfun ("io_uring_free_probe" io_uring_free_probe) :void
  (probe :pointer))

(cffi:defcfun ("io_uring_queue_init_params" io_uring_queue_init_params) :int
  (entries :unsigned-int)
  (ring :pointer)
  (p :pointer))

(cffi:defcfun ("io_uring_queue_init" io_uring_queue_init) :int
  (entries :unsigned-int)
  (ring :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("io_uring_queue_mmap" io_uring_queue_mmap) :int
  (fd :int)
  (p :pointer)
  (ring :pointer))

(cffi:defcfun ("io_uring_ring_dontfork" io_uring_ring_dontfork) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_queue_exit" io_uring_queue_exit) :void
  (ring :pointer))

(cffi:defcfun ("io_uring_peek_batch_cqe" io_uring_peek_batch_cqe) :unsigned-int
  (ring :pointer)
  (cqes :pointer)
  (count :unsigned-int))

(cffi:defcfun ("io_uring_wait_cqes" io_uring_wait_cqes) :int
  (ring :pointer)
  (cqe_ptr :pointer)
  (wait_nr :unsigned-int)
  (ts :pointer)
  (sigmask :pointer))

(cffi:defcfun ("io_uring_wait_cqe_timeout" io_uring_wait_cqe_timeout) :int
  (ring :pointer)
  (cqe_ptr :pointer)
  (ts :pointer))

(cffi:defcfun ("io_uring_submit" io_uring_submit) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_submit_and_wait" io_uring_submit_and_wait) :int
  (ring :pointer)
  (wait_nr :unsigned-int))

(cffi:defcfun ("io_uring_get_sqe" io_uring_get_sqe) :pointer
  (ring :pointer))

(cffi:defcfun ("io_uring_register_buffers" io_uring_register_buffers) :int
  (ring :pointer)
  (iovecs :pointer)
  (nr_iovecs :unsigned-int))

(cffi:defcfun ("io_uring_register_buffers_tags" io_uring_register_buffers_tags) :int
  (ring :pointer)
  (iovecs :pointer)
  (tags :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_register_buffers_update_tag" io_uring_register_buffers_update_tag) :int
  (ring :pointer)
  (off :unsigned-int)
  (iovecs :pointer)
  (tags :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_unregister_buffers" io_uring_unregister_buffers) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_files" io_uring_register_files) :int
  (ring :pointer)
  (files :pointer)
  (nr_files :unsigned-int))

(cffi:defcfun ("io_uring_register_files_tags" io_uring_register_files_tags) :int
  (ring :pointer)
  (files :pointer)
  (tags :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_register_files_update_tag" io_uring_register_files_update_tag) :int
  (ring :pointer)
  (off :unsigned-int)
  (files :pointer)
  (tags :pointer)
  (nr_files :unsigned-int))

(cffi:defcfun ("io_uring_unregister_files" io_uring_unregister_files) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_files_update" io_uring_register_files_update) :int
  (ring :pointer)
  (off :unsigned-int)
  (files :pointer)
  (nr_files :unsigned-int))

(cffi:defcfun ("io_uring_register_eventfd" io_uring_register_eventfd) :int
  (ring :pointer)
  (fd :int))

(cffi:defcfun ("io_uring_register_eventfd_async" io_uring_register_eventfd_async) :int
  (ring :pointer)
  (fd :int))

(cffi:defcfun ("io_uring_unregister_eventfd" io_uring_unregister_eventfd) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_probe" io_uring_register_probe) :int
  (ring :pointer)
  (p :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_register_personality" io_uring_register_personality) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_unregister_personality" io_uring_unregister_personality) :int
  (ring :pointer)
  (id :int))

(cffi:defcfun ("io_uring_register_restrictions" io_uring_register_restrictions) :int
  (ring :pointer)
  (res :pointer)
  (nr_res :unsigned-int))

(cffi:defcfun ("io_uring_enable_rings" io_uring_enable_rings) :int
  (ring :pointer))

(cffi:defcfun ("__io_uring_sqring_wait" __io_uring_sqring_wait) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_iowq_aff" io_uring_register_iowq_aff) :int
  (ring :pointer)
  (cpusz :size-t)
  (mask :pointer))

(cffi:defcfun ("io_uring_unregister_iowq_aff" io_uring_unregister_iowq_aff) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_iowq_max_workers" io_uring_register_iowq_max_workers) :int
  (ring :pointer)
  (values :pointer))

(cffi:defcfun ("__io_uring_get_cqe" __io_uring_get_cqe) :int
  (ring :pointer)
  (cqe_ptr :pointer)
  (submit :unsigned-int)
  (wait_nr :unsigned-int)
  (sigmask :pointer))

(cffi:defcfun ("io_uring_mlock_size" io_uring_mlock_size) :pointer
  (entries :unsigned-int)
  (flags :unsigned-int))

(cffi:defcfun ("io_uring_mlock_size_params" io_uring_mlock_size_params) :pointer
  (entries :unsigned-int)
  (p :pointer))

(cffi:defcstruct io_uring_sqe
	(opcode :pointer)
	(flags :pointer)
	(ioprio :pointer)
	(fd :int32)
	(off :unsigned-long-long)
	(addr2 :unsigned-long-long)
	(addr :unsigned-long-long)
	(splice_off_in :unsigned-long-long)
	(len :uint32)
	(rw_flags :pointer)
	(fsync_flags :uint32)
	(poll_events :pointer)
	(poll32_events :uint32)
	(sync_range_flags :uint32)
	(msg_flags :uint32)
	(timeout_flags :uint32)
	(accept_flags :uint32)
	(cancel_flags :uint32)
	(open_flags :uint32)
	(statx_flags :uint32)
	(fadvise_advice :uint32)
	(splice_flags :uint32)
	(rename_flags :uint32)
	(unlink_flags :uint32)
	(hardlink_flags :uint32)
	(user_data :unsigned-long-long)
	(buf_index :pointer)
	(buf_group :pointer)
	(personality :pointer)
	(splice_fd_in :int32)
	(file_index :uint32)
	(__pad2 :pointer :count 2))

(defanonenum 
	IOSQE_FIXED_FILE_BIT
	IOSQE_IO_DRAIN_BIT
	IOSQE_IO_LINK_BIT
	IOSQE_IO_HARDLINK_BIT
	IOSQE_ASYNC_BIT
	IOSQE_BUFFER_SELECT_BIT)

(cl:defconstant IORING_SETUP_IOPOLL (cl:ash 1 0))

(cl:defconstant IORING_SETUP_SQPOLL (cl:ash 1 1))

(cl:defconstant IORING_SETUP_SQ_AFF (cl:ash 1 2))

(cl:defconstant IORING_SETUP_CQSIZE (cl:ash 1 3))

(cl:defconstant IORING_SETUP_CLAMP (cl:ash 1 4))

(cl:defconstant IORING_SETUP_ATTACH_WQ (cl:ash 1 5))

(cl:defconstant IORING_SETUP_R_DISABLED (cl:ash 1 6))

(defanonenum 
	IORING_OP_NOP
	IORING_OP_READV
	IORING_OP_WRITEV
	IORING_OP_FSYNC
	IORING_OP_READ_FIXED
	IORING_OP_WRITE_FIXED
	IORING_OP_POLL_ADD
	IORING_OP_POLL_REMOVE
	IORING_OP_SYNC_FILE_RANGE
	IORING_OP_SENDMSG
	IORING_OP_RECVMSG
	IORING_OP_TIMEOUT
	IORING_OP_TIMEOUT_REMOVE
	IORING_OP_ACCEPT
	IORING_OP_ASYNC_CANCEL
	IORING_OP_LINK_TIMEOUT
	IORING_OP_CONNECT
	IORING_OP_FALLOCATE
	IORING_OP_OPENAT
	IORING_OP_CLOSE
	IORING_OP_FILES_UPDATE
	IORING_OP_STATX
	IORING_OP_READ
	IORING_OP_WRITE
	IORING_OP_FADVISE
	IORING_OP_MADVISE
	IORING_OP_SEND
	IORING_OP_RECV
	IORING_OP_OPENAT2
	IORING_OP_EPOLL_CTL
	IORING_OP_SPLICE
	IORING_OP_PROVIDE_BUFFERS
	IORING_OP_REMOVE_BUFFERS
	IORING_OP_TEE
	IORING_OP_SHUTDOWN
	IORING_OP_RENAMEAT
	IORING_OP_UNLINKAT
	IORING_OP_MKDIRAT
	IORING_OP_SYMLINKAT
	IORING_OP_LINKAT
	IORING_OP_LAST)

(cl:defconstant IORING_FSYNC_DATASYNC (cl:ash 1 0))

(cl:defconstant IORING_TIMEOUT_ABS (cl:ash 1 0))

(cl:defconstant IORING_TIMEOUT_UPDATE (cl:ash 1 1))

(cl:defconstant IORING_TIMEOUT_BOOTTIME (cl:ash 1 2))

(cl:defconstant IORING_TIMEOUT_REALTIME (cl:ash 1 3))

(cl:defconstant IORING_LINK_TIMEOUT_UPDATE (cl:ash 1 4))

(cl:defconstant IORING_TIMEOUT_CLOCK_MASK (cl:logior (cl:ash 1 2) (cl:ash 1 3)))

(cl:defconstant IORING_TIMEOUT_UPDATE_MASK (cl:logior (cl:ash 1 1) (cl:ash 1 4)))

(cl:defconstant SPLICE_F_FD_IN_FIXED (cl:ash 1 31))

(cl:defconstant IORING_POLL_ADD_MULTI (cl:ash 1 0))

(cl:defconstant IORING_POLL_UPDATE_EVENTS (cl:ash 1 1))

(cl:defconstant IORING_POLL_UPDATE_USER_DATA (cl:ash 1 2))

(cffi:defcstruct io_uring_cqe
	(user_data :unsigned-long-long)
	(res :int32)
	(flags :uint32))

(cl:defconstant IORING_CQE_F_BUFFER (cl:ash 1 0))

(cl:defconstant IORING_CQE_F_MORE (cl:ash 1 1))

(defanonenum 
	(IORING_CQE_BUFFER_SHIFT 16))

(cl:defconstant IORING_OFF_SQ_RING 0)

(cl:defconstant IORING_OFF_CQ_RING #x8000000)

(cl:defconstant IORING_OFF_SQES #x10000000)

(cffi:defcstruct io_sqring_offsets
	(head :uint32)
	(tail :uint32)
	(ring_mask :uint32)
	(ring_entries :uint32)
	(flags :uint32)
	(dropped :uint32)
	(array :uint32)
	(resv1 :uint32)
	(resv2 :unsigned-long-long))

(cl:defconstant IORING_SQ_NEED_WAKEUP (cl:ash 1 0))

(cl:defconstant IORING_SQ_CQ_OVERFLOW (cl:ash 1 1))

(cffi:defcstruct io_cqring_offsets
	(head :uint32)
	(tail :uint32)
	(ring_mask :uint32)
	(ring_entries :uint32)
	(overflow :uint32)
	(cqes :uint32)
	(flags :uint32)
	(resv1 :uint32)
	(resv2 :unsigned-long-long))

(cl:defconstant IORING_CQ_EVENTFD_DISABLED (cl:ash 1 0))

(cl:defconstant IORING_ENTER_GETEVENTS (cl:ash 1 0))

(cl:defconstant IORING_ENTER_SQ_WAKEUP (cl:ash 1 1))

(cl:defconstant IORING_ENTER_SQ_WAIT (cl:ash 1 2))

(cl:defconstant IORING_ENTER_EXT_ARG (cl:ash 1 3))

(cffi:defcstruct io_uring_params
	(sq_entries :uint32)
	(cq_entries :uint32)
	(flags :uint32)
	(sq_thread_cpu :uint32)
	(sq_thread_idle :uint32)
	(features :uint32)
	(wq_fd :uint32)
	(resv :pointer :count 3)
	(sq_off io_sqring_offsets)
	(cq_off io_cqring_offsets))

(cl:defconstant IORING_FEAT_SINGLE_MMAP (cl:ash 1 0))

(cl:defconstant IORING_FEAT_NODROP (cl:ash 1 1))

(cl:defconstant IORING_FEAT_SUBMIT_STABLE (cl:ash 1 2))

(cl:defconstant IORING_FEAT_RW_CUR_POS (cl:ash 1 3))

(cl:defconstant IORING_FEAT_CUR_PERSONALITY (cl:ash 1 4))

(cl:defconstant IORING_FEAT_FAST_POLL (cl:ash 1 5))

(cl:defconstant IORING_FEAT_POLL_32BITS (cl:ash 1 6))

(cl:defconstant IORING_FEAT_SQPOLL_NONFIXED (cl:ash 1 7))

(cl:defconstant IORING_FEAT_EXT_ARG (cl:ash 1 8))

(cl:defconstant IORING_FEAT_NATIVE_WORKERS (cl:ash 1 9))

(cl:defconstant IORING_FEAT_RSRC_TAGS (cl:ash 1 10))

(defanonenum 
	(IORING_REGISTER_BUFFERS 0)
	(IORING_UNREGISTER_BUFFERS 1)
	(IORING_REGISTER_FILES 2)
	(IORING_UNREGISTER_FILES 3)
	(IORING_REGISTER_EVENTFD 4)
	(IORING_UNREGISTER_EVENTFD 5)
	(IORING_REGISTER_FILES_UPDATE 6)
	(IORING_REGISTER_EVENTFD_ASYNC 7)
	(IORING_REGISTER_PROBE 8)
	(IORING_REGISTER_PERSONALITY 9)
	(IORING_UNREGISTER_PERSONALITY 10)
	(IORING_REGISTER_RESTRICTIONS 11)
	(IORING_REGISTER_ENABLE_RINGS 12)
	(IORING_REGISTER_FILES2 13)
	(IORING_REGISTER_FILES_UPDATE2 14)
	(IORING_REGISTER_BUFFERS2 15)
	(IORING_REGISTER_BUFFERS_UPDATE 16)
	(IORING_REGISTER_IOWQ_AFF 17)
	(IORING_UNREGISTER_IOWQ_AFF 18)
	(IORING_REGISTER_IOWQ_MAX_WORKERS 19)
	IORING_REGISTER_LAST)

(cffi:defcstruct io_uring_files_update
	(offset :uint32)
	(resv :uint32)
	(fds :pointer))

(cffi:defcstruct io_uring_rsrc_register
	(nr :uint32)
	(resv :uint32)
	(resv2 :unsigned-long-long)
	(data :pointer)
	(tags :pointer))

(cffi:defcstruct io_uring_rsrc_update
	(offset :uint32)
	(resv :uint32)
	(data :pointer))

(cffi:defcstruct io_uring_rsrc_update2
	(offset :uint32)
	(resv :uint32)
	(data :pointer)
	(tags :pointer)
	(nr :uint32)
	(resv2 :uint32))

(cl:defconstant IORING_REGISTER_FILES_SKIP -2)

(cl:defconstant IO_URING_OP_SUPPORTED (cl:ash 1 0))

(cffi:defcstruct io_uring_probe_op
	(op :pointer)
	(resv :pointer)
	(flags :pointer)
	(resv2 :uint32))

(cffi:defcstruct io_uring_probe
	(last_op :pointer)
	(ops_len :pointer)
	(resv :pointer)
	(resv2 :pointer :count 3)
	(ops :pointer))

(cffi:defcstruct io_uring_restriction
	(opcode :pointer)
	(register_op :pointer)
	(sqe_op :pointer)
	(sqe_flags :pointer)
	(resv :pointer)
	(resv2 :pointer :count 3))

(defanonenum 
	(IORING_RESTRICTION_REGISTER_OP 0)
	(IORING_RESTRICTION_SQE_OP 1)
	(IORING_RESTRICTION_SQE_FLAGS_ALLOWED 2)
	(IORING_RESTRICTION_SQE_FLAGS_REQUIRED 3)
	IORING_RESTRICTION_LAST)

(cffi:defcstruct io_uring_getevents_arg
	(sigmask :unsigned-long-long)
	(sigmask_sz :uint32)
	(pad :uint32)
	(ts :unsigned-long-long))


