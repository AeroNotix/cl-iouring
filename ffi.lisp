;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 4.1.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package #:cl-iouring)
(cffi:defctype :u64 :unsigned-long-long)
(cffi:defctype :size-t :unsigned-long)
(cffi:defctype :int64-t :int64)
(cffi:defctype :socklen-t :unsigned-int)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant _XOPEN_SOURCE 500)

(cffi:defcstruct io_uring_sq
	(khead :pointer)
	(ktail :pointer)
	(kring_mask :pointer)
	(kring_entries :pointer)
	(kflags :pointer)
	(kdropped :pointer)
	(array :pointer)
	(sqes :pointer)
	(sqe_head :unsigned-int)
	(sqe_tail :unsigned-int)
	(ring_sz :size-t)
	(ring_ptr :pointer)
	(pad :pointer :count 4))

(cffi:defcstruct io_uring_cq
	(khead :pointer)
	(ktail :pointer)
	(kring_mask :pointer)
	(kring_entries :pointer)
	(kflags :pointer)
	(koverflow :pointer)
	(cqes :pointer)
	(ring_sz :size-t)
	(ring_ptr :pointer)
	(pad :pointer :count 4))

(cffi:defcstruct io_uring
	(sq io_uring_sq)
	(cq io_uring_cq)
	(flags :unsigned-int)
	(ring_fd :int)
	(features :unsigned-int)
	(pad :pointer :count 3))

(cffi:defcfun ("io_uring_get_probe_ring" io_uring_get_probe_ring) :pointer
  (ring :pointer))

(cffi:defcfun ("io_uring_get_probe" io_uring_get_probe) :pointer)

(cffi:defcfun ("io_uring_free_probe" io_uring_free_probe) :void
  (probe :pointer))

(cffi:defcfun ("io_uring_queue_init_params" io_uring_queue_init_params) :int
  (entries :unsigned-int)
  (ring :pointer)
  (p :pointer))

(cffi:defcfun ("io_uring_queue_init" io_uring_queue_init) :int
  (entries :unsigned-int)
  (ring :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("io_uring_queue_mmap" io_uring_queue_mmap) :int
  (fd :int)
  (p :pointer)
  (ring :pointer))

(cffi:defcfun ("io_uring_ring_dontfork" io_uring_ring_dontfork) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_queue_exit" io_uring_queue_exit) :void
  (ring :pointer))

(cffi:defcfun ("io_uring_peek_batch_cqe" io_uring_peek_batch_cqe) :unsigned-int
  (ring :pointer)
  (cqes :pointer)
  (count :unsigned-int))

(cffi:defcfun ("io_uring_wait_cqes" io_uring_wait_cqes) :int
  (ring :pointer)
  (cqe_ptr :pointer)
  (wait_nr :unsigned-int)
  (ts :pointer)
  (sigmask :pointer))

(cffi:defcfun ("io_uring_wait_cqe_timeout" io_uring_wait_cqe_timeout) :int
  (ring :pointer)
  (cqe_ptr :pointer)
  (ts :pointer))

(cffi:defcfun ("io_uring_submit" io_uring_submit) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_submit_and_wait" io_uring_submit_and_wait) :int
  (ring :pointer)
  (wait_nr :unsigned-int))

(cffi:defcfun ("io_uring_get_sqe" io_uring_get_sqe) :pointer
  (ring :pointer))

(cffi:defcfun ("io_uring_register_buffers" io_uring_register_buffers) :int
  (ring :pointer)
  (iovecs :pointer)
  (nr_iovecs :unsigned-int))

(cffi:defcfun ("io_uring_register_buffers_tags" io_uring_register_buffers_tags) :int
  (ring :pointer)
  (iovecs :pointer)
  (tags :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_register_buffers_update_tag" io_uring_register_buffers_update_tag) :int
  (ring :pointer)
  (off :unsigned-int)
  (iovecs :pointer)
  (tags :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_unregister_buffers" io_uring_unregister_buffers) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_files" io_uring_register_files) :int
  (ring :pointer)
  (files :pointer)
  (nr_files :unsigned-int))

(cffi:defcfun ("io_uring_register_files_tags" io_uring_register_files_tags) :int
  (ring :pointer)
  (files :pointer)
  (tags :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_register_files_update_tag" io_uring_register_files_update_tag) :int
  (ring :pointer)
  (off :unsigned-int)
  (files :pointer)
  (tags :pointer)
  (nr_files :unsigned-int))

(cffi:defcfun ("io_uring_unregister_files" io_uring_unregister_files) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_files_update" io_uring_register_files_update) :int
  (ring :pointer)
  (off :unsigned-int)
  (files :pointer)
  (nr_files :unsigned-int))

(cffi:defcfun ("io_uring_register_eventfd" io_uring_register_eventfd) :int
  (ring :pointer)
  (fd :int))

(cffi:defcfun ("io_uring_register_eventfd_async" io_uring_register_eventfd_async) :int
  (ring :pointer)
  (fd :int))

(cffi:defcfun ("io_uring_unregister_eventfd" io_uring_unregister_eventfd) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_probe" io_uring_register_probe) :int
  (ring :pointer)
  (p :pointer)
  (nr :unsigned-int))

(cffi:defcfun ("io_uring_register_personality" io_uring_register_personality) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_unregister_personality" io_uring_unregister_personality) :int
  (ring :pointer)
  (id :int))

(cffi:defcfun ("io_uring_register_restrictions" io_uring_register_restrictions) :int
  (ring :pointer)
  (res :pointer)
  (nr_res :unsigned-int))

(cffi:defcfun ("io_uring_enable_rings" io_uring_enable_rings) :int
  (ring :pointer))

(cffi:defcfun ("__io_uring_sqring_wait" __io_uring_sqring_wait) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_iowq_aff" io_uring_register_iowq_aff) :int
  (ring :pointer)
  (cpusz :size-t)
  (mask :pointer))

(cffi:defcfun ("io_uring_unregister_iowq_aff" io_uring_unregister_iowq_aff) :int
  (ring :pointer))

(cffi:defcfun ("io_uring_register_iowq_max_workers" io_uring_register_iowq_max_workers) :int
  (ring :pointer)
  (values :pointer))

(cffi:defcfun ("__io_uring_get_cqe" __io_uring_get_cqe) :int
  (ring :pointer)
  (cqe_ptr :pointer)
  (submit :unsigned-int)
  (wait_nr :unsigned-int)
  (sigmask :pointer))

(cffi:defcfun ("io_uring_mlock_size" io_uring_mlock_size) :pointer
  (entries :unsigned-int)
  (flags :unsigned-int))

(cffi:defcfun ("io_uring_mlock_size_params" io_uring_mlock_size_params) :pointer
  (entries :unsigned-int)
  (p :pointer))


